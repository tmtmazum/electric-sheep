#include "es_lib/sdl.h"
#include "es_lib/asset_map.h"
#include <memory>
#include <cstdio>
#include <cassert>


namespace es
{

template <typename T, typename D>
auto make_scoped(T* t, D d)
{
	assert(t);
	return std::unique_ptr<T, D>(t, std::move(d));
}

auto B(int32_t visual_value, int32_t physical_value)
{
	return (static_cast<int64_t>(visual_value) << 32) | physical_value;
}

int64_t map[18][32] = {
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0),
	B(1,1), B(1,1), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(1,1), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0), B(0,0)
};

}

int main(int argc, char *argv[])
{
	es::sdl::context sdl;
	auto const a = es::sdl::create_bmp("assets/rect2985.bmp");
	sdl.blit_surface_to_background(a.get());
	es::sdl::g_asset_map()[1] = es::sdl::make_unique_asset(es::sdl::create_bmp("assets/visual-1.bmp"));
	sdl.print(es::map);
	sdl.update();
	printf("JOBS DONE\n");
	getchar();
	return 0;
}
